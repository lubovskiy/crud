// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: phonebook.proto

package crud

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *Contact) Validate() error {
	if this.Id != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Id); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Id", err)
		}
	}
	if this.Name != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Name); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Name", err)
		}
	}
	if this.Phone != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Phone); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Phone", err)
		}
	}
	return nil
}
func (this *ListContactsRequest) Validate() error {
	if this.Filter != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Filter); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Filter", err)
		}
	}
	if this.Limit != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Limit); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Limit", err)
		}
	}
	return nil
}
func (this *ListContactFilter) Validate() error {
	return nil
}
func (this *ListContactsResponse) Validate() error {
	for _, item := range this.Contacts {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Contacts", err)
			}
		}
	}
	return nil
}
func (this *AddContactRequest) Validate() error {
	if nil == this.Name {
		return github_com_mwitkow_go_proto_validators.FieldError("Name", fmt.Errorf("message must exist"))
	}
	if this.Name != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Name); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Name", err)
		}
	}
	if nil == this.Phone {
		return github_com_mwitkow_go_proto_validators.FieldError("Phone", fmt.Errorf("message must exist"))
	}
	if this.Phone != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Phone); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Phone", err)
		}
	}
	return nil
}
func (this *IsErr) Validate() error {
	if this.Err != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Err); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Err", err)
		}
	}
	return nil
}
func (this *UpdateContactRequest) Validate() error {
	if nil == this.Id {
		return github_com_mwitkow_go_proto_validators.FieldError("Id", fmt.Errorf("message must exist"))
	}
	if this.Id != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Id); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Id", err)
		}
	}
	if this.Name != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Name); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Name", err)
		}
	}
	if this.Phone != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Phone); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Phone", err)
		}
	}
	return nil
}
func (this *DeleteContactRequest) Validate() error {
	if nil == this.Id {
		return github_com_mwitkow_go_proto_validators.FieldError("Id", fmt.Errorf("message must exist"))
	}
	if this.Id != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Id); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Id", err)
		}
	}
	return nil
}
